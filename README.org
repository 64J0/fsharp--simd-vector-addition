#+TITLE: F# SIMD Vector Addition
#+DATE: [2025-06-23 Mon]

** Overview

This project explores how to implement and test SIMD (Single Instruction,
Multiple Data) operations in F#, specifically using:

- 128-bit SIMD via SSE (~System.Runtime.Intrinsics.X86.Sse~, where SSE stands
  for Streaming SIMD Extensions)
- Safe memory access with ~Span<T>~ and ~MemoryMarshal.Cast~
- Automated unit testing with ~Expecto~
- Performance benchmarking with ~BenchmarkDotNet~

It compares scalar vs SIMD performance on vector addition of ~float32~ arrays.

This program uses the *intrinsics* technology, that allows us to write low-level
CPU instructions directly in high-level languages like F#, C#, or C++, without
writing assembly code. They expose specific hardware features (like SIMD,
cryptography, etc.) as functions/methods that map directly to processor
instructions.

*** Assembly code

If you'd like to check the generated x86 assembly code, check this link from
[[https://godbolt.org/z/334xh6eoj][godbolt]].

** Features

- Safe, GC-friendly SIMD implementation (no ~unsafe~ blocks)
- Fallback to scalar operations for trailing elements
- Unit tests for correctness
- Benchmarking suite to evaluate performance benefits

** Run Unit Tests

#+BEGIN_SRC bash
dotnet test
#+END_SRC

** Run Benchmarks

Compile and run in Release mode:

#+BEGIN_SRC bash
dotnet run -c Release
#+END_SRC

Sample output (running as ~sudo~):

#+BEGIN_EXAMPLE
// * Summary *

BenchmarkDotNet v0.15.2, Linux Ubuntu 24.04.2 LTS (Noble Numbat)
13th Gen Intel Core i7-13620H 4.90GHz, 1 CPU, 16 logical and 10 physical cores
.NET SDK 9.0.101
  [Host]     : .NET 9.0.0 (9.0.24.52809), X64 RyuJIT AVX2 DEBUG
  DefaultJob : .NET 9.0.0 (9.0.24.52809), X64 RyuJIT AVX2


| Method         | size    | Mean          | Error         | StdDev        | Ratio | RatioSD | Gen0       | Gen1      | Gen2      | Allocated    | Alloc Ratio |
|--------------- |-------- |--------------:|--------------:|--------------:|------:|--------:|-----------:|----------:|----------:|-------------:|------------:|
| ScalarAdd      | 100     |      65.86 us |      0.512 us |      0.479 us |  1.00 |    0.01 |     4.8828 |         - |         - |     60.62 KB |        1.00 |
| SimdAdd        | 100     |      71.27 us |      0.755 us |      0.707 us |  1.08 |    0.01 |     4.8828 |         - |         - |     60.62 KB |        1.00 |
| SimdAddGeneric | 100     |      71.63 us |      0.972 us |      0.910 us |  1.09 |    0.02 |     4.8828 |         - |         - |     60.62 KB |        1.00 |
|                |         |               |               |               |       |         |            |           |           |              |             |
| ScalarAdd      | 10000   |   7,074.84 us |     78.370 us |     69.473 us |  1.00 |    0.01 |   492.1875 |   85.9375 |         - |   6054.76 KB |        1.00 |
| SimdAdd        | 10000   |   7,197.62 us |     54.469 us |     48.285 us |  1.02 |    0.01 |   492.1875 |   85.9375 |         - |   6054.76 KB |        1.00 |
| SimdAddGeneric | 10000   |   7,216.13 us |     95.163 us |     89.016 us |  1.02 |    0.02 |   492.1875 |   85.9375 |         - |   6054.76 KB |        1.00 |
|                |         |               |               |               |       |         |            |           |           |              |             |
| ScalarAdd      | 1000000 | 699,076.50 us | 10,776.110 us | 10,079.980 us |  1.00 |    0.02 | 48000.0000 | 1000.0000 | 1000.0000 | 605469.48 KB |        1.00 |
| SimdAdd        | 1000000 | 715,734.32 us |  4,938.261 us |  4,619.252 us |  1.02 |    0.02 | 48000.0000 | 1000.0000 | 1000.0000 | 605469.48 KB |        1.00 |
| SimdAddGeneric | 1000000 | 709,933.49 us |  7,567.869 us |  7,078.990 us |  1.02 |    0.02 | 48000.0000 | 1000.0000 | 1000.0000 | 605469.48 KB |        1.00 |

// * Hints *
Outliers
  AddBenchmark.ScalarAdd: Default -> 1 outlier  was  removed (7.44 ms)
  AddBenchmark.SimdAdd: Default   -> 1 outlier  was  removed (7.41 ms)

// * Legends *
  size        : Value of the 'size' parameter
  Mean        : Arithmetic mean of all measurements
  Error       : Half of 99.9% confidence interval
  StdDev      : Standard deviation of all measurements
  Ratio       : Mean of the ratio distribution ([Current]/[Baseline])
  RatioSD     : Standard deviation of the ratio distribution ([Current]/[Baseline])
  Gen0        : GC Generation 0 collects per 1000 operations
  Gen1        : GC Generation 1 collects per 1000 operations
  Gen2        : GC Generation 2 collects per 1000 operations
  Allocated   : Allocated memory per single operation (managed only, inclusive, 1KB = 1024B)
  Alloc Ratio : Allocated memory ratio distribution ([Current]/[Baseline])
  1 us        : 1 Microsecond (0.000001 sec)

// * Diagnostic Output - MemoryDiagnoser *


// ***** BenchmarkRunner: End *****
Run time: 00:02:00 (120.06 sec), executed benchmarks: 9

Global total time: 00:02:05 (125.42 sec), executed benchmarks: 9
#+END_EXAMPLE

** Related projects:

- [[https://github.com/64J0/samples--assembly][64J0/samples--assembly]]
- [[https://github.com/CBGonzalez/Core3Intrinsics-Intro][CBGonzalez/Core3Intrinsics-Intro]]
- [[https://github.com/CBGonzalez/SIMDPerformance][CBGonzalez/SIMDPerformance]]
- [[https://github.com/CBGonzalez/SIMDIntro][CBGonzalez/SIMDIntro]]
